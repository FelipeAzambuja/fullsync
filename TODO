---===[ to 0.9.2 Tasks ]====-----------------------------------------
	[ ] smb copies all files always

---===[ to 0.10 Tasks ]====-------------------------------------------------

Background Processes:
	[ ] impl some dialog/composite showing all running processes

Buffering:
	[ ] write fs buffer file to bla+"_", delete existing and rename it

FileSystem Abstraction:
	[ ] dont impl instable connection as base class but as wrapper
		(so we are able to wrap every connection into an instable wrapper,
		or better reconnect-on-error-wrapper)

---===[ to 0.11 Tasks ]====-------------------------------------------------

== Architecture Revamp ==

Feedback:
	[ ] cancel in sync phase
	[ ] cancel in execution phase
		actually this is not just a Gui thingy, we need to nicely stop the
		ActionQueue/ExecutionBuffer and flush the sync buffer
	[?] some encapsulement for src and dst files ? [Task?]
	[ ] Busy indication should count how many busies where started and stop
		when all are finished (a general task/progress win like eclipse has?)

Syncprocess encapsulement:
	[ ] beside having access to all the neat classes we can use to
		do a very custom synchronization process we need to encapsule
		the functionallity offered by the program itself, like:
		  - do full sync
		  - just try
		params:
		  - profile name
		  - gui yes/no
		  - interactive yes/no
		  - verbose yes/no

Architecture:
	[ ] give ActionQueue or Buffer some kind of input stream ?
	[ ] generally make more stream-like behaviour ?
		nah, it destroys all means of statistics/feedback
		but enables us to sync much larger dirs and consume much less memory

Realtime-Reporting:
	[ ] Implement realtime status information updating
	[ ] Implement events for certain actions

Sheduler:
	[ ] add groups to profiles (so we can cli fullsync saying schedule group a)
	[ ] access to logfiles
	[ ] the timer thread is restarted every time a change occures
	    to any profile (including the once that was just run by the timer)
	    -> we should build our own thread there which only needs to refresh
	    -> or we could make a specific lookup whether the changed profile
	       comes earlier than the one currently scheduled
	[ ] show that a profile is currently processed

Exceptions/Errors:
	[ ] try catching most exceptions at (few) specific points and show
		a dialog containing the exception and a link to the sf.net bugtracker.

Sync Rules
	[ ]	Ignore files older than a given date (Simple Rule).
	[ ]	Advanced Rules configuration wizard. A wizard to help users creating
		the .syncrules file in any directory (os subdirectory) where he needs it.

==========================

Bugs:
	[ ] the infinite timeout seems to hang the app if the ftp thing
		does not get any data (some silent disconnect?)
	[ ] dirs with -s are not handled correctly on all ftp servers

Small Things:
	[ ] enable/disable certain menu items if not available
	[ ] an icon to indicate fullsync is in remote listening mode (?)

Linux:
	[ ] popups of taskdecision dialog are pretty high (about twice the normal height)
		guess it's as high as it is wide
	[ ] some fonts are wrong: task decision: choose is smaller than source...
		the latter one looks like a standard font
	[ ] filter combo of task dec is too small (width)
	[ ] nicelistview: all non bold fonts look rather large

Remote:
	[ ] log remote connections (out and incoming)
	[ ]	Improved security (crypted password and hidden inferfaces other than login)

Images:
	[ ]	and being able to create compositions (and cache them) in the ImageRepository

Dispose:
	[ ] make sure all widgets get properly disposed (tableitems ?)

Processor:
	[ ] impl new TraveralTypes
		actually we'll need the possibility to say "src didn't change, so
		dst doesn't interest me" (in sync without retrieving file data)

ActionDecider:
	[ ] make AD xml file

Versioning:
	[ ] implement working versioning system

Backup:
	[ ] copy to temp, then rename
	[ ] scan whole src, then dst - saves hd jumps (traversal type)
	[ ] maybe it would be nice to have a min lastmodified difference
		so we can backup stuff that is not currently worked on(?)
		(good for not exact backup, so we don't copy temp files)

Configuration:
	[ ] flush profiles every now and then, maybe use dirty flag

Distro:
	[ ] put images into source / jar.


---===[ to 1.0 Tasks ]====-------------------------------------------------

Multitarget buffering:
	[ ] nice name ;)... its just that the fact that you are not able
		to use a buffered target in two different profiles is quite
		annoying. it would be nice to be able to name the buffer
		file differently or sth.

FTP:
	[ ] there must be a way to set times using UTIME command

Logwindow
	[ ] Show size of copied data

SB:
	[?] we need to build buffer info from fs as well, so fs orphans are
		detected without having the same file on the other side
		maybe make different buffers / different behaviors as
		destination buffer does not want to know about new files in fs
		(it would delete them ?)
	[ ] added monitor fs, but its still not working correctly (buff src
		does not have a length when adding to buffer, maybe use fs ones)
		furthermore, how should this all work at all, to-ftp will always
		have differences to destination, so we'll need to ignore
		src <-> dst state at all.

Files:
	[ ] we need to differenciate between case sensitivity.
		store names toLower in hashtables and search for toLower
		ftp: try checking x permission on . to find out if its a win system
		local: check properties ?
	[ ] ascii/bin
	[ ] we can not handle the multiple actions when a dir changes to file or
		the other way around. we would need to delete the exiting one and
		copy over the new one.

TakeIgnore -> Filter:
	[ ] Ignore takes place immediatly atm, on src and dst resulting
		in absolutely no action, just being ignored from all syncs.
		we should maybe add a special rule whether "ignore" is relevant
		for source, destination or both. this does only affect the
		ruleset, in detail the takeignoredecider. the action decider
		will either not being asked or get a orphan state.
		-> important is to add a location param to the takeignore
		   deciders method
		-> but the statedecider will mark them equal :-/
		   Node.isIgnored ?

NoBufferFound Handling:
	[ ] let him choose between:   [destination buffer only]
		  - There is nothing at the destination.
			(don't overwrite, build buffer while copying)
		  - There is something at the destination
			but its not sure its the same as in source.
			(don't ask overwrite)
		  - There is the same version in destination.
			(build buffer from filesystem (and source?))

Execution:
	[ ] make some controlling unit which will handle profile execution
	[ ] we should make sure profiles are locked while executed and
		we should show some neat symbol then.
	[ ] make fullsync#performActions more feedback-friendly
	[ ]	make logwindow use fullsync#performActions

Connections:
	[ ] Sftp seems to pretty instable, it starts throwing exceptions
		named "Failure", when trying to retrieve response headers,
		after a few minutes

	[ ]	ZIP File System

Threading
	[ ] better UI / task differenciation
	[ ] console <-> ui

Logging:
	[ ] verify logging quality
	[ ] it would be nice if we explain in the logs, why we
        think that a file has changed or not and show the
        relevant modification times of both file versions.

Buffer:
	[ ] optimize largefile handling
	[ ] create multithreaded direct-read delayed-write buffer-access
	[ ] create multithreaded delayed-read delayed-write buffer-access
	[ ] create cyclic buffer-storage
	[ ] create bufferedfile tree on the fly instead of ahead of sync process

Rules:
	[ ] use xml for rulefiles
	[ ] create generic rulesfile w/ dirrules
	[ ] copy rule abstraction from backup
	[ ] Merge rules or impl good "Set" mechanizm like syncrules in xml

Optimization:
	[ ]	how to optimize and secure FS-access
	[ ] getChild() - on null create, put this into a method ?
		nope...
	[ ] refresh of fs files
	[ ] rewrite some connections using the nio package?


-------------------------------------------------------------------------------

make isDir info only valid if existant ?

-------------------------------------------------------------------------------

Directories handled as structure instead of file-like:
	+ if we are checking changes fs<->buffer on one side and want
	  to copy single changed files to the other side we need to make
	  sure the dirs are created as well
	- correct deletion of dirs


---===[ Requests ]====------------------------------------------------------

 [ ] Better backup, espec create date dir in destination like "/usr/local/foo/$DATE/..."
		(Wolfgang)
