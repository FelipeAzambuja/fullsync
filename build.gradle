buildscript {
	repositories {
		jcenter()
	}
}

plugins {
	id 'com.github.ben-manes.versions' version '0.14.0'
	id 'com.diffplug.gradle.spotless' version '3.3.0'
}

apply plugin: 'com.diffplug.gradle.spotless'
apply plugin: 'distribution'

group = "net.sourceforge.fullsync"
version = '0.11.0'

spotless {
	encoding 'UTF-8'
}

subprojects {
	buildscript {
		repositories {
			jcenter()
		}
	}
	group = rootProject.group
	version = rootProject.version
	apply plugin: 'com.diffplug.gradle.spotless'

	plugins.withType(JavaPlugin).whenPluginAdded {
		sourceCompatibility = 1.8
		targetCompatibility = 1.8
		jar {
			manifest {
				attributes 'License': 'GPLv2+'
				attributes 'FullSync-Version': version
				attributes 'Copyright': 'Copyright (c) 2017 the FullSync Team'
			}
		}
		spotless {
			java {
				licenseHeaderFile rootProject.file('resources/License-header.txt')
				eclipseFormatFile rootProject.file('resources/eclipse-jdt-formatter.xml')
				removeUnusedImports()
				trimTrailingWhitespace()
				endWithNewline()
			}
		}

	}

	ext {
		swtVersion = "3.105.3"
		slf4jVersion = "1.7.25"
		commonsCliVersion = "1.4"
		commonsNetVersion = "3.6"
		commonsVfsVersion = "2.1"
		sambaJcifsVersion = "1.3.17"
		jcraftJschVersion = "0.1.54"
		junitVersion = "4.12"
	}

	repositories {
		jcenter()
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = '3.5'
}

distributions {
	main {
		contents {
			from 'resources/fullsync*'
			from file('LICENSE')
		}
	}
}

gradle.projectsEvaluated {
	distTar {
		dependsOn project('fullsync-ui').jar
	}

	distZip {
		dependsOn project('fullsync-ui').jar
	}

	distributions.main.contents {
		from('resources') {
			include 'fullsync*'
		}
	}

	def ui = project(':fullsync-ui')
	def resolvedUiDist = ui.configurations.dist.resolvedConfiguration
	def commonContents = copySpec {}
	resolvedUiDist.resolvedArtifacts.each { a ->
		commonContents.with copySpec {
			def f = a.file
			into('lib') {
				from(f.path) {
					def group = a.moduleVersion.id.group
					def classifier = a.classifier ?: ""
					classifier = classifier ? "-${classifier}" : ""
					rename(f.name, "${group}-${a.name}${classifier}.${a.extension}")
				}
			}
		}
	}
	commonContents.with copySpec {
		into('lib') {
			from resolvedUiDist.files - resolvedUiDist.resolvedArtifacts*.file
		}
	}
	distributions.main.contents.with commonContents
}
